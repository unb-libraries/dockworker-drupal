#!/usr/bin/env bash

ROOT_DIR="$(pwd)/"
LIST=$( git diff --name-only --cached --diff-filter=ACM )
PHPCS_BIN=vendor/bin/phpcs

if [[ "$LIST" == "" ]];
then
  echo "No added or modified files in this commit set. Skipping Linting!"
  exit 0
fi

if [ ! -f $PHPCS_BIN ];
then
  echo "PHPCS was not found in this project's bin directory. Please run composer install. "
  exit 1
fi

# Check for enabled development modules.
 if [[ -f ${ROOT_DIR}/config-yml/core.extension.yml ]] && [[ $LIST =~ "config-yml/core.extension.yml" ]]; then
  echo "Checking for enabled development extensions..."
  if git --no-pager show :config-yml/core.extension.yml | grep -q 'devel\|kint\|dblog'; then
    printf "\n** Warning : You are committing changes to ./config-yml/core.extension.yml that enable modules typically only used for development.\n\n"
    git diff HEAD config-yml/core.extension.yml
    exec < /dev/tty
    read -p "Would you still like to continue? " -n 1 -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      printf "\nAborting due to enabled development modules."
      exit 1
    fi
  fi
fi

echo "Linting staged PHP files..."
${ROOT_DIR}/vendor/bin/dockworker validate:drupal:php $LIST
SNIFF_STATUS=$?
if [ $SNIFF_STATUS -ne 0 ]; then
  exec < /dev/tty
  read -p "The PHP linter reported one or more errors. Would you still like to continue anyhow? " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborting due to failed PHP lint."
    exit $SNIFF_STATUS
  fi
fi

echo "Linting YML files..."
${ROOT_DIR}/vendor/bin/dockworker validate:drupal:yaml $LIST
SNIFF_STATUS=$?
if [ $SNIFF_STATUS -ne 0 ]; then
  exec < /dev/tty
  read -p "The YAML file lint reported one or more errors. Would you still like to continue anyhow? " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborting due to failed YAML lint."
    exit $SNIFF_STATUS
  fi
fi

if [[ $LIST == *"composer."* ]];
then
  printf "\nValidating /build/composer.json..."
  cd build
  composer validate --no-check-all || exit 1;
  cd ..
fi
echo "/build/composer.json Ok!"

if [[ $LIST == *"composer."* ]];
then
  printf "\nValidating /composer.json..."
  composer validate || exit 1;
fi
echo "/composer.json Ok!"

# Return the status of the last run command.
exit $?
